using Sandtrap.Web.DataAnnotations;
using System;
using System.Collections;
using System.Linq;
using System.Web.Mvc;
using Sandtrap.Extensions;

namespace Sandtrap.Web.Extensions
{

    /// <summary>
    /// 
    /// </summary>
    public static class ModelMetadataExtensions
    {

        #region .Table 

        /// <summary>
        /// Gets a value indicating if rows can be added in a table generated by the 
        /// <see cref="Sandtrap.Web.Html.TableHelper.TableEditorFor"/> method.
        /// </summary>
        /// <param name="metaData">
        /// The ModelMetadata instance that this method extends.
        /// </param>
        internal static bool TableCanAddRows(this ModelMetadata metaData)
        {
            return metaData.AdditionalValues.ContainsKey(TableEditAttribute.AllowAdditionsKey);
        }

        /// <summary>
        /// Gets a value indicating if rows can be deleted in a table generated by the 
        /// <see cref="Sandtrap.Web.Html.TableHelper.TableEditorFor"/> method.
        /// </summary>
        /// <param name="metaData">
        /// The ModelMetadata instance that this method extends.
        /// </param>
        internal static bool TableCanDeleteRows(this ModelMetadata metaData)
        {
            return metaData.AdditionalValues.ContainsKey(TableEditAttribute.AllowDeletionsKey);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="metaData">
        /// 
        /// </param>
        internal static string TableIsActiveProperty(this ModelMetadata metaData)
        {
            if (metaData.AdditionalValues.ContainsKey(TableEditAttribute.IsActivePropertyKey))
            {
                return (string)metaData.AdditionalValues[TableEditAttribute.IsActivePropertyKey];
            }
            return "IsActive";
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="metaData">
        /// 
        /// </param>
        internal static string TableIsDirtyProperty(this ModelMetadata metaData)
        {
            if (metaData.AdditionalValues.ContainsKey(TableEditAttribute.IsDirtyPropertyKey))
            {
                return (string)metaData.AdditionalValues[TableEditAttribute.IsDirtyPropertyKey];
            }
            return "IsDirty";
        }

        /// <summary>
        /// Return a value indicating if rows in a table generated with the 
        /// <see cref="Sandtrap.Web.Html.TableHelper.TableEditorFor"/> method should 
        /// include row numbers. 
        /// </summary>
        /// <param name="metaData">
        /// The ModelMetadata instance that this method extends.
        /// </param>
        internal static bool TableIncludeRowNumbers(this ModelMetadata metaData)
        {
            return metaData.AdditionalValues.ContainsKey(TableDisplayAttribute.IncludeRowNumbersKey);
        }

        /// <summary>
        /// Returns a value indicating if a table generated with the 
        /// <see cref="Sandtrap.Web.Html.TableHelper.TableDisplayFor"/> method should 
        /// include a column with a link to an edit action method. 
        /// </summary>
        /// <param name="metaData">
        /// The ModelMetadata instance that this method extends.
        /// </param>
        internal static bool TableIncludeEditLink(this ModelMetadata metaData)
        {
            return metaData.AdditionalValues.ContainsKey(TableDisplayAttribute.IncludeEditLinkKey);
        }

        /// <summary>
        /// Returns a value indicating if a table generated with the 
        /// <see cref="Sandtrap.Web.Html.TableHelper.TableDisplayFor"/> method should 
        /// include a column with a link to a details action method. 
        /// </summary>
        /// <param name="metaData">
        /// The ModelMetadata instance that this method extends.
        /// </param>
        internal static bool TableIncludeViewLink(this ModelMetadata metaData)
        {
            return metaData.AdditionalValues.ContainsKey(TableDisplayAttribute.IncludeViewLinkKey);
        }

        internal static bool TableIsLink(this ModelMetadata metaData)
        {
            return metaData.AdditionalValues.ContainsKey(TableLinkAttribute.TableLinkKey);
        }


        #endregion

        #region .Table column 

        /// <summary>
        /// Returns a value indicating if a property decorated with the 
        /// <see cref="Sandtrap.Web.DataAnnotations.TableColumnAttribute"/> is excluded from 
        /// tables generated by the <see cref="Sandtrap.Web.Html.TableHelper.TableDisplayFor"/>
        /// and <see cref="Sandtrap.Web.Html.TableHelper.TableEditorFor"/> methods.
        /// </summary>
        /// <param name="metaData">
        /// The ModelMetadata instance that this method extends.
        /// </param>
        internal static bool ColumnIsExcluded(this ModelMetadata metaData)
        {
            return metaData.AdditionalValues.ContainsKey(TableColumnAttribute.ExcludeKey);
        }

        /// <summary>
        /// Returns a value indicating if a property decorated with the 
        /// <see cref="Sandtrap.Web.DataAnnotations.TableColumnAttribute"/> is readonly in a 
        /// table generated by the <see cref="Sandtrap.Web.Html.TableHelper.TableEditorFor"/> 
        /// method.
        /// </summary>
        /// <param name="metaData">
        /// The ModelMetadata instance that this method extends.
        /// </param>
        internal static bool ColumnIsReadOnly(this ModelMetadata metaData)
        {
            if (metaData.IsReadOnly)
            {
                return true;
            }
            return metaData.AdditionalValues.ContainsKey(TableColumnAttribute.IsReadonlyKey);
        }

        /// <summary>
        /// Returns a value indicating if a property decorated with the 
        /// <see cref="Sandtrap.Web.DataAnnotations.TableColumnAttribute"/> 
        /// has a display property.
        /// </summary>
        /// <param name="metaData">
        /// The ModelMetadata instance that this method extends.
        /// </param>
        internal static bool ColumnHasDisplayProperty(this ModelMetadata metaData)
        {
            return metaData.AdditionalValues.ContainsKey(TableColumnAttribute.DisplayPropertyKey);
        }

        /// <summary>
        /// Returns a value indicating if the value of a property decorated with the 
        /// <see cref="Sandtrap.Web.DataAnnotations.TableColumnAttribute"/> should
        /// be ommited if the previous row contains the same value.
        /// </summary>
        /// <param name="metaData">
        /// The ModelMetadata instance that this method extends.
        /// </param>
        /// <remarks>
        /// If true, and the preceeding row contains the same value, no text is rendered
        /// in the table cell.
        /// </remarks>
        internal static bool ColumnNoRepeat(this ModelMetadata metaData)
        {
            return metaData.AdditionalValues.ContainsKey(TableColumnAttribute.NoRepeatKey);
        }

        /// <summary>
        /// Returns a value indicating if a property decorated with the 
        /// <see cref="Sandtrap.Web.DataAnnotations.TableColumnAttribute"/> 
        /// is totalled in the footers of tables generated by the 
        /// <see cref="Sandtrap.Web.Html.TableHelper.TableDisplayFor"/>
        /// and <see cref="Sandtrap.Web.Html.TableHelper.TableEditorFor"/> methods.
        /// </summary>
        /// <param name="metaData">
        /// The ModelMetadata instance that this method extends.
        /// </param>
        internal static bool ColumnIncludeTotals(this ModelMetadata metaData)
        {
            return metaData.AdditionalValues.ContainsKey(TableColumnAttribute.IncludeTotalKey);
        }

        /// <summary>
        /// Returns a value indicating if a property decorated with the 
        /// <see cref="Sandtrap.Web.DataAnnotations.TableColumnAttribute"/> 
        /// should be rendered as a hyperlink in tables generated by the 
        /// <see cref="Sandtrap.Web.Html.TableHelper.TableDisplayFor"/>
        /// and <see cref="Sandtrap.Web.Html.TableHelper.TableEditorFor"/> methods.
        /// </summary>
        /// <param name="metaData">
        /// The ModelMetadata instance that this method extends.
        /// </param>
        internal static bool ColumnIsLink(this ModelMetadata metaData)
        {
            return metaData.AdditionalValues.ContainsKey(TableLinkAttribute.TableLinkKey);
        }

        /// <summary>
        /// Returns a value indicating if a property decorated with the 
        /// <see cref="Sandtrap.Web.DataAnnotations.TableSelectAttribute"/> 
        /// should be rendered as a select control in tables generated by the 
        /// <see cref="Sandtrap.Web.Html.TableHelper.TableEditorFor"/> method.
        /// </summary>
        /// <param name="metaData">
        /// The ModelMetadata instance that this method extends.
        /// </param>
        internal static bool ColumnIsSelect(this ModelMetadata metaData)
        {
            return metaData.AdditionalValues.ContainsKey(TableSelectAttribute.TableSelectKey);
        }



        #endregion

        /// <summary>
        /// Returns the default value for the property.
        /// </summary>
        /// <param name="metaData">
        /// The ModelMetadata instance that this method extends.
        /// </param>
        public static object DefaultValue(this ModelMetadata metaData)
        {
            return metaData.ModelType.IsValueType ? Activator.CreateInstance(metaData.ModelType) : null;
        }

        /// <summary>
        /// Returns a value indicating if the metadata contains the TableColumn Exclude attribute.
        /// </summary>
        /// <param name="metaData">
        /// The metadata.
        /// </param>
        public static bool IsExcluded(this ModelMetadata metaData)
        {
            return metaData.AdditionalValues.ContainsKey(TableColumnAttribute.ExcludeKey);
        }

        /// <summary>
        /// Returns a value indicating if the metadata contains the HiddenInput attribute.
        /// </summary>
        /// <param name="metaData">
        /// The metadata.
        /// </param>
        public static bool IsHidden(this ModelMetadata metaData)
        {
            return metaData.TemplateHint == "HiddenInput";
        }

        /// <summary>
        /// Returns a value indicating if the metadata model is a boolean value.
        /// </summary>
        /// <param name="metaData">
        /// The metadata.
        /// </param>
        public static bool IsBoolean(this ModelMetadata metaData)
        {
            return metaData.ModelType == typeof(bool);
        }

        /// <summary>
        /// Returns a value indicating if the metadata DataType is currency.
        /// </summary>
        /// <param name="metaData">
        /// The metadata.
        /// </param>
        public static bool IsCurrency(this ModelMetadata metaData)
        {
            return metaData.DataTypeName == "Currency";
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="metaData"></param>
        /// <returns></returns>
        public static bool IsDate(this ModelMetadata metaData)
        {
            return metaData.DataTypeName == "Date";
        }

        /// <summary>
        /// Returns a value indicating if the metadata TemplateHint is percent.
        /// </summary>
        /// <param name="metaData">
        /// The metadata.
        /// </param>
        public static bool IsPercent(this ModelMetadata metaData)
        {
            return metaData.TemplateHint == "Percent";
        }

        /// <summary>
        /// Returns a value indicating if the metadata TemplateHint is numeric or percent, or the DataType is currency.
        /// </summary>
        /// <param name="metaData">
        /// The metadata.
        /// </param>
        public static bool IsNumeric(this ModelMetadata metaData)
        {
            return metaData.TemplateHint == "Numeric" || metaData.IsCurrency() || metaData.IsPercent();
        }

        /// <summary>
        /// Returns a value indicating if the metadata contains the TableColumn TextProperty attribute.
        /// </summary>
        /// <param name="metaData">
        /// The metadata.
        /// </param>
        public static bool RenderTextProperty(this ModelMetadata metaData)
        {
            return metaData.AdditionalValues.ContainsKey(TableColumnAttribute.TextPropertyKey);
        }

        /// <summary>
        /// Returns a the TableColumn TextProperty value.
        /// </summary>
        /// <param name="metaData">
        /// The metadata.
        /// </param>
        public static string TextProperty(this ModelMetadata metaData)
        {
            return metaData.RenderTextProperty() ? (string)metaData.AdditionalValues[TableColumnAttribute.TextPropertyKey] : null;
        }

        /// <summary>
        /// Returns a value indicating if the metadata contains the TableColumn IsReadOnly attribute.
        /// </summary>
        /// <param name="metaData">
        /// The metadata.
        /// </param>
        public static bool RenderReadonly(this ModelMetadata metaData)
        {
            return metaData.AdditionalValues.ContainsKey(TableColumnAttribute.IsReadonlyKey);
        }

        /// <summary>
        /// Returns a value indicating if the metadata contains the TableColumn RenderTotal attribute.
        /// </summary>
        /// <param name="metaData">
        /// The metadata.
        /// </param>
        public static bool RenderTotals(this ModelMetadata metaData)
        {
            if (metaData.AdditionalValues.ContainsKey(TableColumnAttribute.RenderTotalKey))
            {
                return true;
            }
            else if (metaData.AdditionalValues.ContainsKey(TableColumnAttribute.TextPropertyKey))
            {
                string textProperty = (string)metaData.AdditionalValues[TableColumnAttribute.TextPropertyKey];
                ModelMetadata textMetadata = metaData.Properties.First(m => m.PropertyName == textProperty);
                return textMetadata.RenderTotals();
            }
            return false;
        }

        /// <summary>
        /// Returns the value to include in totals.
        /// </summary>
        /// <param name="metaData">
        /// The metadata.
        /// </param>
        public static double GetTotal(this ModelMetadata metaData)
        {
            if (metaData.AdditionalValues.ContainsKey(TableColumnAttribute.RenderTotalKey))
            {
                return Convert.ToDouble(metaData.Model);
            }
            else if (metaData.AdditionalValues.ContainsKey(TableColumnAttribute.TextPropertyKey))
            {
                string textProperty = (string)metaData.AdditionalValues[TableColumnAttribute.TextPropertyKey];
                ModelMetadata textMetadata = metaData.Properties.First(m => m.PropertyName == textProperty);
                if (textMetadata.AdditionalValues.ContainsKey(TableColumnAttribute.RenderTotalKey))
                {
                    return Convert.ToDouble(textMetadata.Model);
                }
            }
            return 0D;
        }

        /// <summary>
        /// Returns a value indicating if the metadata contains the TableColumn NoRepeat attribute.
        /// </summary>
        /// <param name="metaData">
        /// The metadata.
        /// </param>
        public static bool NoRepeat(this ModelMetadata metaData)
        {
            return metaData.AdditionalValues.ContainsKey(TableColumnAttribute.NoRepeatKey);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="metaData"></param>
        /// <returns></returns>
        public static string GetFormatedValue(this ModelMetadata metaData)
        {
            if (metaData.Model == null)
            {
                return metaData.NullDisplayText;
            }
            if (metaData.RenderTextProperty())
            {
                metaData = metaData.Properties.FirstOrDefault(m => m.PropertyName == metaData.TextProperty());
            }
            if (metaData.ModelType.IsEnum)
            {
                return ((Enum)metaData.Model).ToDescription();
            }
            // Get the formatted value
            string formatString = metaData.DisplayFormatString ?? "{0}";
            return string.Format(formatString, metaData.Model);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="metaData"></param>
        /// <returns></returns>
        public static string GetFormatString(this ModelMetadata metaData)
        {
            if (metaData.RenderTextProperty())
            {
                metaData = metaData.Properties.FirstOrDefault(m => m.PropertyName == metaData.TextProperty());
            }
            // Get the formatted value
            return metaData.DisplayFormatString ?? "{0}";
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="metaData"></param>
        /// <returns></returns>
        //public static bool IsSelect(this ModelMetadata metaData)
        //{
        //    return metaData.AdditionalValues.ContainsKey(TableSelectAttribute.TableSelectKey);
        //}

        /// <summary>
        /// 
        /// </summary>
        /// <param name="metaData"></param>
        /// <returns></returns>
        public static bool IsEnum(this ModelMetadata metaData)
        {
            return metaData.AdditionalValues.ContainsKey(TableColumnAttribute.RenderEnumKey);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="metaData"></param>
        /// <returns></returns>
        //public static bool IsSelectReadonly(this ModelMetadata metaData)
        //{
        //    return metaData.AdditionalValues.ContainsKey(TableSelectAttribute.IsReadonlyKey);
        //}

        /// <summary>
        /// 
        /// </summary>
        /// <param name="metaData"></param>
        /// <returns></returns>
        //public static bool IsSelectCascade(this ModelMetadata metaData)
        //{
        //    return metaData.AdditionalValues.ContainsKey(TableSelectAttribute.IsCascadeKey);
        //}

        /// <summary>
        /// 
        /// </summary>
        /// <param name="metaData"></param>
        /// <returns></returns>
        //public static string SelectIDProperty(this ModelMetadata metaData)
        //{
        //    return metaData.IsSelect() ? (string)metaData.AdditionalValues[TableSelectAttribute.IDPropertyKey] : null;
        //}

        /// <summary>
        /// 
        /// </summary>
        /// <param name="metaData"></param>
        /// <returns></returns>
        //public static string SelectTextProperty(this ModelMetadata metaData)
        //{
        //    return metaData.IsSelect() ? (string)metaData.AdditionalValues[TableSelectAttribute.TextPropertyKey] : null;
        //}

        /// <summary>
        /// 
        /// </summary>
        /// <param name="metaData"></param>
        /// <returns></returns>
        public static bool IsCollection(this ModelMetadata metaData)
        {
            if (metaData.ModelType == typeof(string))
            {
                return false;
            }
            return typeof(IEnumerable).IsAssignableFrom(metaData.ModelType);
        }


        /// <summary>
        /// Gets the text to display in a custom html select generated by the Html.SelectFor method.
        /// </summary>
        /// <param name="metaData">
        /// The metadata of the property to display.
        /// </param>
        //public static string SelectDisplayText(this ModelMetadata metaData)
        //{

        //    //html.Append(DisplayText(((Enum)metaData.Model).ToDescription()));
        //    if (metaData.ModelType.IsEnum)
        //    {
        //        return ((Enum)metaData.Model).ToDescription();
        //    }
        //    else if (metaData.AdditionalValues.ContainsKey(SelectAttribute.DisplayTextPropertyKey))
        //    {
        //        // Get the property name
        //        string propertyName = (string)metaData.AdditionalValues[SelectAttribute.DisplayTextPropertyKey];
        //        // Get the metadata for the property
        //        ModelMetadata property = metaData.Properties.FirstOrDefault(m => m.PropertyName == propertyName);
        //        // Returns its value
        //        return string.Format("{0}", property.Model);
        //    }
        //    // Return the ToString() value of the model
        //    return string.Format("{0}", metaData.Model);
        //}

    }

}
